%pure-parser
%locations
%defines
%error-verbose
%parse-param {driver_t *driver}
%lex-param {void *scanner}

%{
#include <stdio.h>
#include <string.h>
#include <math.h>
#include "nissa.hpp"
#include "driver.hpp"
#include "parser.hpp"
#include "redefine_yy.hpp"

  const int debug_parser=0;
  
  int parser_lex(YYSTYPE *lvalp,YYLTYPE *llocp,void *scanner);
  void parser_error(YYLTYPE *locp,driver_t *driver,const char *err)
  {crash("exception %d %s",locp->first_line,err);}

#define scanner driver->scanner
  %}

 //union used to catch all symbols
%union
{
    double double_numb;
    unsigned int unsigned_int_numb;
    int int_numb;
    char *text;
    gauge_action_name_t gauge_action_name;
    stout_pars_t *stout_pars;
    pseudo_corr_meas_pars_t *pseudo_corr_meas_pars;
    nucleon_corr_meas_pars_t *nucleon_corr_meas_pars;
    
    fermionic_putpourri_meas_pars_t *fermionic_putpourri_meas_pars;
    quark_rendens_meas_pars_t *quark_rendens_meas_pars;
    magnetization_meas_pars_t *magnetization_meas_pars;
    
    gauge_obs_meas_pars_t *plaq_pol_meas_pars;
}

%token TK_L
%token TK_T
%token TK_BETA
%token <double_numb> TK_DOUBLE
%type <double_numb> real_numb
%token <int_numb> TK_SIGNED_INT
%type <int_numb> int_numb
%token <unsigned_int_numb> TK_UNSIGNED_INT
%token <text> TK_QUOTED_TEXT
//true, false
%token TK_TRUE TK_FALSE
//each
%token <unsigned_int_numb> TK_EACH
%type <unsigned_int_numb> each
//yes no none
%token TK_NONE TK_YES TK_NO
//residue
%token <double_numb> TK_RESIDUE
%type <double_numb> residue
//metadynamics
%token TK_META
%token TK_TOPO_POTENTIAL
//path
%token TK_PATH
%type <text> path
//meta commands
%token TK_META_PRINT_SCANNED
%token TK_META_PRINT_FULL
//quark content
%token TK_QUARK
%token TK_DEGENERACY
%type <unsigned_int_numb> degeneracy
%token TK_MASS
%type <double_numb> mass
%token TK_RE_POT_CH
%type <double_numb> re_pot_ch
%token TK_IM_POT_CH
%type <double_numb> im_pot_ch
%token TK_ELEC_CHARGE
%type <double_numb> elec_charge
//stout pars
%token TK_GLOBAL_STOUT_PARS
%type <stout_pars> stout_pars
%token <unsigned_int_numb> TK_NLEVELS
%type <unsigned_int_numb> nlevels
%token <double_numb> TK_RHO
%type <double_numb> rho
//gauge action
%token TK_GAUGE_ACTION
%token TK_WILSON
%type <gauge_action_name> gauge_action
%type <gauge_action_name> global_gauge_action
//background field
%token TK_BKGRD_EM_FIELD
%token <unsigned_int_numb> TK_B_COMP
%token <unsigned_int_numb> TK_E_COMP
//number of copies and hits
%token TK_NCOPIES TK_NHITS
%type <unsigned_int_numb> ncopies nhits
//pseudo corr
%token TK_PSEUDO_CORRELATORS
%type <pseudo_corr_meas_pars> pseudo_corr_meas_pars
//nucleon corr
%token TK_NUCLEON_CORRELATORS
%type <nucleon_corr_meas_pars> nucleon_corr_meas_pars
//putpourri
%token TK_FERMIONIC_PUTPOURRI
%type <fermionic_putpourri_meas_pars> fermionic_putpourri_meas_pars
%token TK_COMPUTE_SUSC
%type <unsigned_int_numb> compute_susc
//rendens
%token TK_QUARK_RENDENS
%type <quark_rendens_meas_pars> quark_rendens_meas_pars
//magnetization
%token TK_MAGNETIZATION
%type <magnetization_meas_pars> magnetization_meas_pars
//gauge measures
%token  TK_PLAQ_POL
%type <plaq_pol_meas_pars>  plaq_pol_meas_pars
%%

commands: commands command
        | command
;

command: global_specify
       | meta_command
;

global_specify: global_L
              | global_T
              | global_beta
              | global_gauge_action
              | topo_potential_pars
              | add_quark
              | global_stout_pars
              | global_bckgr_field
/////////////// fermionic measures ////////////////
              | global_pseudo_corr_meas
              | global_nucleon_corr_meas
              | global_fermionic_putpourri_meas
              | global_quark_rendens_meas
              | global_magnetization_meas
/////////////// gauge measures ////////////////////
              | global_plaq_pol_meas
;

meta_command: meta_print_scanned
            | meta_print_full
;

meta_print_scanned: TK_META_PRINT_SCANNED TK_QUOTED_TEXT {FILE *fout=open_file($2,"w");driver->master_fprintf(fout);close_file(fout);}
meta_print_full: TK_META_PRINT_FULL TK_QUOTED_TEXT {FILE *fout=open_file($2,"w");driver->master_fprintf(fout,true);close_file(fout);}

//////////////////////////////////////////////// SIMPLE STUFF //////////////////////////////////////////////////

global_T: TK_T '=' TK_UNSIGNED_INT {driver->T=$3;};
global_L: TK_L '=' TK_UNSIGNED_INT {driver->L=$3; };
global_beta: TK_BETA '=' real_numb {driver->beta=$3;};
global_gauge_action: gauge_action {driver->gauge_action_name=$1;};

gauge_action: TK_GAUGE_ACTION '=' TK_WILSON {$$=WILSON_GAUGE_ACTION;};

each: TK_EACH '=' TK_UNSIGNED_INT {$$=$3;};

residue: TK_RESIDUE '=' real_numb {$$=$3;};


////////////////////////////////////////////// TOPO POTENTIAL //////////////////////////////////////////////////

//specify topopotential pars
topo_potential_pars: init_meta_topo_potential_pars meta_topo_potential_pars {}
                          | init_topo_potential_pars topo_potential_pars {}
                          | suppress_topo_potential_pars {}
;

//meta-topo-potential
init_meta_topo_potential_pars: TK_TOPO_POTENTIAL TK_META {driver->topotential_pars.flag=2;};

//ordinary topo-potential
init_topo_potential_pars: TK_TOPO_POTENTIAL {driver->topotential_pars.flag=1;};

//suppress topo-potential
suppress_topo_potential_pars: TK_TOPO_POTENTIAL TK_NONE{driver->topotential_pars.flag=0;};

//a list of meta-topo-potential subcommand
meta_topo_potential_pars: meta_topo_potential_pars meta_topo_potential_par
                        | meta_topo_potential_par
;

//spec
meta_topo_potential_par: ;

//a list of topo-potential subcommand
topo_potential_pars: topo_potential_pars topo_potential_par
                   | topo_potential_par
;

//spec
topo_potential_par: ;

////////////////////////////////////////////////// STOUT PARS //////////////////////////////////////////////////

global_stout_pars: stout_pars {driver->stout_pars=(*$1);delete $1;};

stout_pars: TK_GLOBAL_STOUT_PARS {$$=new stout_pars_t;}
          | stout_pars nlevels {$$->nlevels=$2;}
          | stout_pars rho {$$->rho=$2;}
;

nlevels: TK_NLEVELS '=' TK_UNSIGNED_INT {$$=$3;};
rho: TK_RHO '=' real_numb {$$=$3;};

////////////////////////////////////////////////// QUARK CONTENT //////////////////////////////////////////////////

add_quark: name_quark quark_pars;

name_quark: TK_QUARK TK_QUOTED_TEXT
          {
	      quark_content_t q;
	      q.name=$2;
	      driver->quarks.push_back(q);
	  }
          | TK_QUARK
          {
	      quark_content_t q;
	      driver->quarks.push_back(q);
	  }
;

quark_pars: quark_pars quark_par
          | quark_par
;

quark_par: degeneracy {driver->quarks.back().deg=$1;}
         | mass {driver->quarks.back().mass=$1;}
         | re_pot_ch {driver->quarks.back().re_pot=$1;}
         | im_pot_ch {driver->quarks.back().im_pot=$1;}
         | elec_charge {driver->quarks.back().charge=$1;}
;

degeneracy: TK_DEGENERACY '=' TK_UNSIGNED_INT {$$=$3;};
mass: TK_MASS '=' real_numb {$$=$3;};
re_pot_ch: TK_RE_POT_CH '=' real_numb {$$=$3;};
im_pot_ch: TK_IM_POT_CH '=' real_numb {$$=$3;};
elec_charge: TK_ELEC_CHARGE '=' real_numb {$$=$3;};

////////////////////////////////////////////////// BACKGROUND FIELD //////////////////////////////////////////////////

global_bckgr_field: TK_BKGRD_EM_FIELD TK_NO {driver->em_field_pars.flag=0;}
                  | TK_BKGRD_EM_FIELD set_em_field_pars {driver->em_field_pars.flag=1;}
;

set_em_field_pars: set_em_field_pars set_em_field_par
                 | set_em_field_par
;

set_em_field_par: set_e_field_par
                | set_b_field_par
;

set_e_field_par: TK_E_COMP '=' TK_DOUBLE {driver->em_field_pars.E[$1]=$3;};
set_b_field_par: TK_B_COMP '=' TK_DOUBLE {driver->em_field_pars.B[$1]=$3;};

////////////////////////////////////////////////// PSEUDO CORR //////////////////////////////////////////////////

global_pseudo_corr_meas: TK_PSEUDO_CORRELATORS TK_NO {driver->pseudo_corr_meas_pars.flag=false;}
                       | pseudo_corr_meas_pars {driver->pseudo_corr_meas_pars=(*$1);delete $1;}
;

pseudo_corr_meas_pars: TK_PSEUDO_CORRELATORS {$$=new pseudo_corr_meas_pars_t;$$->flag=true;}
                     | pseudo_corr_meas_pars each {$$->flag=$2;}
                     | pseudo_corr_meas_pars path {$$->path=$2;}
                     | pseudo_corr_meas_pars residue {$$->residue=$2;}
                     | pseudo_corr_meas_pars nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// NUCLEON CORR //////////////////////////////////////////////////

global_nucleon_corr_meas: TK_NUCLEON_CORRELATORS TK_NO {driver->nucleon_corr_meas_pars.flag=false;}
                        | nucleon_corr_meas_pars {driver->nucleon_corr_meas_pars=(*$1);delete $1;}
;

nucleon_corr_meas_pars: TK_NUCLEON_CORRELATORS {$$=new nucleon_corr_meas_pars_t;$$->flag=true;}
                      | nucleon_corr_meas_pars each {$$->flag=$2;}
                      | nucleon_corr_meas_pars path {$$->path=$2;}
                      | nucleon_corr_meas_pars residue {$$->residue=$2;}
                      | nucleon_corr_meas_pars nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// FERMIONIC PUPOURRI //////////////////////////////////////////////////

global_fermionic_putpourri_meas: TK_FERMIONIC_PUTPOURRI TK_NO {driver->fermionic_putpourri_meas_pars.flag=false;}
                               | fermionic_putpourri_meas_pars {driver->fermionic_putpourri_meas_pars=(*$1);delete $1;}
;

fermionic_putpourri_meas_pars: TK_FERMIONIC_PUTPOURRI {$$=new fermionic_putpourri_meas_pars_t;$$->flag=true;}
                             | fermionic_putpourri_meas_pars each {$$->flag=$2;}
                             | fermionic_putpourri_meas_pars path {$$->path=$2;}
                             | fermionic_putpourri_meas_pars residue {$$->residue=$2;}
                             | fermionic_putpourri_meas_pars compute_susc {$$->compute_susc=$2;}
                             | fermionic_putpourri_meas_pars ncopies {$$->ncopies=$2;}
                             | fermionic_putpourri_meas_pars nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// RENDENS //////////////////////////////////////////////////

global_quark_rendens_meas: TK_QUARK_RENDENS TK_NO {driver->quark_rendens_meas_pars.flag=false;}
                         | quark_rendens_meas_pars {driver->quark_rendens_meas_pars=(*$1);delete $1;}
;

quark_rendens_meas_pars: TK_QUARK_RENDENS {$$=new quark_rendens_meas_pars_t;$$->flag=true;}
                       | quark_rendens_meas_pars each {$$->flag=$2;}
                       | quark_rendens_meas_pars path {$$->path=$2;}
                       | quark_rendens_meas_pars residue {$$->residue=$2;}
                       | quark_rendens_meas_pars ncopies {$$->ncopies=$2;}
                       | quark_rendens_meas_pars nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// MAGNETIZATION //////////////////////////////////////////////////

global_magnetization_meas: TK_MAGNETIZATION TK_NO {driver->magnetization_meas_pars.flag=false;}
                         | magnetization_meas_pars {driver->magnetization_meas_pars=(*$1);delete $1;}
;

magnetization_meas_pars: TK_MAGNETIZATION {$$=new magnetization_meas_pars_t;$$->flag=true;}
                       | magnetization_meas_pars each {$$->flag=$2;}
                       | magnetization_meas_pars path {$$->path=$2;}
                       | magnetization_meas_pars residue {$$->residue=$2;}
                       | magnetization_meas_pars ncopies {$$->ncopies=$2;}
                       | magnetization_meas_pars nhits {$$->nhits=$2;}
;

/////////////////////////////////////////////////// GAUGE OBS /////////////////////////////////////////////////////

global_plaq_pol_meas: TK_PLAQ_POL TK_NO {driver->plaq_pol_meas_pars.flag=false;}
                    | plaq_pol_meas_pars {driver->plaq_pol_meas_pars=(*$1);delete $1;}
;

plaq_pol_meas_pars: TK_PLAQ_POL {$$=new gauge_obs_meas_pars_t;$$->flag=true;}
                  | plaq_pol_meas_pars each {$$->flag=$2;}
                  | plaq_pol_meas_pars path {$$->path=$2;}
;

//////////////////////////////////////////////////// CASTING //////////////////////////////////////////////////////

//cast to a double numb
real_numb: TK_DOUBLE {$$=$1;master_printf("Copying %lg to double\n",$1);}
         | int_numb {$$=$1;master_printf("Casting %d to double\n",$1);}
;

//cast to integer
int_numb: TK_UNSIGNED_INT {$$=$1;master_printf("Castying unsgined %d to signed integer\n",$1);}
        | TK_SIGNED_INT {$$=$1;master_printf("Copying signed %d to integer\n",$1);}


ncopies: TK_NCOPIES '=' TK_UNSIGNED_INT {$$=$3;};
nhits: TK_NHITS '=' TK_UNSIGNED_INT {$$=$3;};

compute_susc: TK_COMPUTE_SUSC '=' TK_UNSIGNED_INT {$$=$3;};

path: TK_PATH '=' TK_QUOTED_TEXT {$$=$3;};
