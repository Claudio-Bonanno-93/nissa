%pure-parser
%locations
%defines
%error-verbose
%parse-param {driver_t *driver}
%lex-param {void *scanner}

%{
#include <stdio.h>
#include <string.h>
#include <math.h>
#include "nissa.hpp"
#include "driver.hpp"
#include "parser.hpp"
#include "redefine_yy.hpp"

  const int debug_parser=0;
  
  int parser_lex(YYSTYPE *lvalp,YYLTYPE *llocp,void *scanner);
  void parser_error(YYLTYPE *locp,driver_t *driver,const char *err)
  {crash("exception %d %s",locp->first_line,err);}

#define scanner driver->scanner
  %}

 //union used to catch all symbols
%union
{
    double double_numb;
    int int_numb;
    char *text;
    gauge_action_name_t gauge_action_name;
    stout_pars_t *stout_pars;
    nucleon_corr_meas_pars_t *nucleon_corr_meas_pars;
    meson_corr_meas_pars_t *meson_corr_meas_pars;
    std::vector<int> *int_list;
    std::pair<int,int> *int_pair;
    std::vector<std::pair<int,int> > *int_pair_list;
    
    fermionic_putpourri_meas_pars_t *fermionic_putpourri_meas_pars;
    quark_rendens_meas_pars_t *quark_rendens_meas_pars;
    magnetization_meas_pars_t *magnetization_meas_pars;
    
    gauge_obs_meas_pars_t *plaq_pol_meas_pars;
}

//arithmethc
%left TK_MINUS TK_PLUS
%left TK_TIMES TK_DIV
%precedence NEG
%right TK_POW

//general pars
%token TK_L
%token TK_T
%token TK_BETA
%token <double_numb> TK_DOUBLE
%type <double_numb> real_numb
%token <int_numb> TK_INT
%type <int_numb> int_numb
%type <int_pair> int_pair
//%type <int_list> int_list
//%type <int_list> internal_int_list
%type <int_pair_list> int_pair_list
%type <int_pair_list> internal_int_pair_list
%token <text> TK_QUOTED_TEXT
%token TK_COMMA
%token TK_BR_OP
%token TK_BR_CL
%token TK_CUR_BR_OP
%token TK_CUR_BR_CL
//each
%token <int_numb> TK_EACH
%type <int_numb> each
//after
%token <int_numb> TK_AFTER
%type <int_numb> after
//yes no none
%token TK_NONE TK_YES TK_NO
//residue
%token <double_numb> TK_RESIDUE
%type <double_numb> residue
//metadynamics
%token TK_META
%token TK_TOPO_POTENTIAL
//path
%token TK_PATH
%type <text> path
//meta commands
%token TK_META_PRINT_SCANNED
%token TK_META_PRINT_FULL
//quark content
%token TK_QUARK
%token TK_DEGENERACY
%type <int_numb> degeneracy
%token TK_IS_STAG
%type <int_numb> is_stag
%token TK_KAPPA
%type <double_numb> kappa
%token TK_MASS
%type <double_numb> mass
%token TK_RE_POT_CH
%type <double_numb> re_pot_ch
%token TK_IM_POT_CH
%type <double_numb> im_pot_ch
%token TK_ELEC_CHARGE
%type <double_numb> elec_charge
//stout pars
%token TK_GLOBAL_STOUT_PARS
%type <stout_pars> stout_pars
%token <int_numb> TK_NLEVELS
%type <int_numb> nlevels
%token <double_numb> TK_RHO
%type <double_numb> rho
//gauge action
%token TK_GAUGE_ACTION
%token TK_WILSON
%token TK_TLSYM
%token TK_IWASAKI
%type <gauge_action_name> gauge_action
%type <gauge_action_name> global_gauge_action
//background field
%token TK_BKGRD_EM_FIELD
%token <int_numb> TK_B_COMP
%token <int_numb> TK_E_COMP
//number of copies and hits
%token TK_NCOPIES TK_NHITS
%type <int_numb> ncopies nhits
//meson corr
%token TK_MESON_CORRELATORS
%token TK_MESON_LIST
%type <meson_corr_meas_pars> meson_corr_meas_pars
%type <int_pair_list> meson_list
//nucleon corr
%token TK_NUCLEON_CORRELATORS
%type <nucleon_corr_meas_pars> nucleon_corr_meas_pars
//putpourri
%token TK_FERMIONIC_PUTPOURRI
%type <fermionic_putpourri_meas_pars> fermionic_putpourri_meas_pars
%token TK_COMPUTE_SUSC
%type <int_numb> compute_susc
//rendens
%token TK_QUARK_RENDENS
%type <quark_rendens_meas_pars> quark_rendens_meas_pars
//magnetization
%token TK_MAGNETIZATION
%type <magnetization_meas_pars> magnetization_meas_pars
//gauge measures
%token TK_PLAQ_POL
%type <plaq_pol_meas_pars>  plaq_pol_meas_pars
//evolution parameters
%token TK_EVOLVE_PARS
%token TK_NTRAJ_TOT
%token TK_SKIP_MTEST_NTRAJ
%token TK_TRAJ_LENGTH
%token TK_PF_ACTION_RESIDUE
%token TK_MD_RESIDUE
%token TK_NMD_STEPS
%token TK_NGAUGE_SUBSTEPS
//conf parameters
%token TK_CONF_PATH
%token TK_STORE_CONF_PATH
%token TK_STORE_CONF_EACH
%token TK_STORE_RUNNING_TEMP_CONF
%token TK_START_COND
%token TK_HOT
%token TK_COLD
%%

commands: commands command
        | command
;

command: global_specify
       | meta_command
;

global_specify: global_L
              | global_T
              | global_beta
              | global_gauge_action
              | topo_potential_pars
              | add_quark
              | global_stout_pars
              | global_bckgr_field
/////////////// fermionic measures ////////////////
              | global_meson_corr_meas
              | global_nucleon_corr_meas
              | global_fermionic_putpourri_meas
              | global_quark_rendens_meas
              | global_magnetization_meas
/////////////// gauge measures ////////////////////
              | global_plaq_pol_meas
/////////////// evolve and confpars ///////////////////////
              | global_evolve_pars
              | global_conf_pars
;

meta_command: meta_print_scanned
            | meta_print_full
;

meta_print_scanned: TK_META_PRINT_SCANNED TK_QUOTED_TEXT {FILE *fout=open_file($2,"w");driver->master_fprintf(fout);close_file(fout);}
meta_print_full: TK_META_PRINT_FULL TK_QUOTED_TEXT {FILE *fout=open_file($2,"w");driver->master_fprintf(fout,true);close_file(fout);}

//////////////////////////////////////////////// SIMPLE STUFF //////////////////////////////////////////////////

global_T: TK_T '=' int_numb {driver->T=$3;};
global_L: TK_L '=' int_numb {driver->L=$3; };
global_beta: TK_BETA '=' real_numb {driver->beta=$3;};
global_gauge_action: gauge_action {driver->gauge_action_name=$1;};

gauge_action: TK_GAUGE_ACTION '=' TK_WILSON {$$=WILSON_GAUGE_ACTION;};
            | TK_GAUGE_ACTION '=' TK_TLSYM {$$=TLSYM_GAUGE_ACTION;};
            | TK_GAUGE_ACTION '=' TK_IWASAKI {$$=IWASAKI_GAUGE_ACTION;};

each: TK_EACH '=' int_numb {$$=$3;};

after: TK_AFTER '=' int_numb {$$=$3;};

residue: TK_RESIDUE '=' real_numb {$$=$3;};

ncopies: TK_NCOPIES '=' int_numb {$$=$3;};

nhits: TK_NHITS '=' int_numb {$$=$3;};

compute_susc: TK_COMPUTE_SUSC '=' int_numb {$$=$3;};

path: TK_PATH '=' TK_QUOTED_TEXT {$$=$3;};

////////////////////////////////////////////// TOPO POTENTIAL //////////////////////////////////////////////////

//specify topopotential pars
topo_potential_pars: init_meta_topo_potential_pars meta_topo_potential_pars {}
                          | init_topo_potential_pars topo_potential_pars {}
                          | suppress_topo_potential_pars {}
;

//meta-topo-potential
init_meta_topo_potential_pars: TK_TOPO_POTENTIAL TK_META {driver->topotential_pars.flag=2;};

//ordinary topo-potential
init_topo_potential_pars: TK_TOPO_POTENTIAL {driver->topotential_pars.flag=1;};

//suppress topo-potential
suppress_topo_potential_pars: TK_TOPO_POTENTIAL TK_NONE{driver->topotential_pars.flag=0;};

//a list of meta-topo-potential subcommand
meta_topo_potential_pars: meta_topo_potential_pars meta_topo_potential_par
                        | meta_topo_potential_par
;

//spec
meta_topo_potential_par: ;

//a list of topo-potential subcommand
topo_potential_pars: topo_potential_pars topo_potential_par
                   | topo_potential_par
;

//spec
topo_potential_par: ;

////////////////////////////////////////////////// STOUT PARS //////////////////////////////////////////////////

global_stout_pars: stout_pars {driver->stout_pars=(*$1);delete $1;};

stout_pars: TK_GLOBAL_STOUT_PARS {$$=new stout_pars_t;}
          | stout_pars nlevels {$$->nlevels=$2;}
          | stout_pars rho {$$->rho=$2;}
;

nlevels: TK_NLEVELS '=' int_numb {$$=$3;};
rho: TK_RHO '=' real_numb {$$=$3;};

////////////////////////////////////////////////// QUARK CONTENT //////////////////////////////////////////////////

add_quark: name_quark quark_pars;

name_quark: TK_QUARK TK_QUOTED_TEXT
          {
	      quark_content_t q;
	      q.name=$2;
	      driver->quarks.push_back(q);
	  }
          | TK_QUARK
          {
	      quark_content_t q;
	      driver->quarks.push_back(q);
	  }
;

quark_pars: quark_pars quark_par
          | quark_par
;

quark_par: degeneracy {driver->quarks.back().deg=$1;}
         | is_stag {driver->quarks.back().is_stag=$1;}
         | mass {driver->quarks.back().mass=$1;}
         | kappa {driver->quarks.back().kappa=$1;}
         | re_pot_ch {driver->quarks.back().re_pot=$1;}
         | im_pot_ch {driver->quarks.back().im_pot=$1;}
         | elec_charge {driver->quarks.back().charge=$1;}
;

degeneracy: TK_DEGENERACY '=' int_numb {$$=$3;};
is_stag: TK_IS_STAG '=' int_numb {$$=true;};
mass: TK_MASS '=' real_numb {$$=$3;};
kappa: TK_KAPPA '=' real_numb {$$=$3;};
re_pot_ch: TK_RE_POT_CH '=' real_numb {$$=$3;};
im_pot_ch: TK_IM_POT_CH '=' real_numb {$$=$3;};
elec_charge: TK_ELEC_CHARGE '=' real_numb {$$=$3;};

////////////////////////////////////////////////// BACKGROUND FIELD //////////////////////////////////////////////////

global_bckgr_field: TK_BKGRD_EM_FIELD TK_NO {driver->em_field_pars.flag=0;}
                  | TK_BKGRD_EM_FIELD set_em_field_pars {driver->em_field_pars.flag=1;}
;

set_em_field_pars: set_em_field_pars set_em_field_par
                 | set_em_field_par
;

set_em_field_par: set_e_field_par
                | set_b_field_par
;

set_e_field_par: TK_E_COMP '=' real_numb {driver->em_field_pars.E[$1]=$3;};
set_b_field_par: TK_B_COMP '=' real_numb {driver->em_field_pars.B[$1]=$3;};

////////////////////////////////////////////////// NUCLEON CORR //////////////////////////////////////////////////

global_nucleon_corr_meas: TK_NUCLEON_CORRELATORS TK_NO {driver->nucleon_corr_meas_pars.flag=false;}
                        | nucleon_corr_meas_pars {driver->nucleon_corr_meas_pars=(*$1);delete $1;}
;

nucleon_corr_meas_pars: TK_NUCLEON_CORRELATORS {$$=new nucleon_corr_meas_pars_t;$$->flag=true;}
                      | nucleon_corr_meas_pars each {$$->flag=$2;}
                      | nucleon_corr_meas_pars after {$$->after=$2;}
                      | nucleon_corr_meas_pars path {$$->path=$2;}
                      | nucleon_corr_meas_pars residue {$$->residue=$2;}
                      | nucleon_corr_meas_pars nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// MESON CORR //////////////////////////////////////////////////

global_meson_corr_meas: TK_MESON_CORRELATORS TK_NO {driver->meson_corr_meas_pars.flag=false;}
                        | meson_corr_meas_pars {driver->meson_corr_meas_pars=(*$1);delete $1;}
;

meson_corr_meas_pars: TK_MESON_CORRELATORS {$$=new meson_corr_meas_pars_t;$$->flag=true;}
                      | meson_corr_meas_pars each {$$->flag=$2;}
                      | meson_corr_meas_pars after {$$->after=$2;}
                      | meson_corr_meas_pars path {$$->path=$2;}
                      | meson_corr_meas_pars residue {$$->residue=$2;}
                      | meson_corr_meas_pars nhits {$$->nhits=$2;}
                      | meson_corr_meas_pars meson_list {$$->mesons=*$2;}
;

meson_list: TK_MESON_LIST '=' int_pair_list {
    if((*$3)[0]!=std::make_pair(15,15)) crash("first entry of the meson list must be 15,15, instead it is: %d %d",(*$$)[0].first,(*$$)[0].second);
    for(size_t i=0;i<$3->size();i++)
	{
	    int f=(*$3)[i].first;
	    int s=(*$3)[i].second;
	    if((f<0)||(f>15)) crash("first part of entry %d is %d, should be in the range [0,15]",f);
	    if((s<0)||(s>15)) crash("second part of entry %d is %d, should be in the range [0,15]",s);
        }
	$$=$3;}
;


////////////////////////////////////////////////// FERMIONIC PUPOURRI //////////////////////////////////////////////////

global_fermionic_putpourri_meas: TK_FERMIONIC_PUTPOURRI TK_NO {driver->fermionic_putpourri_meas_pars.flag=false;}
                               | fermionic_putpourri_meas_pars {driver->fermionic_putpourri_meas_pars=(*$1);delete $1;}
;

fermionic_putpourri_meas_pars: TK_FERMIONIC_PUTPOURRI {$$=new fermionic_putpourri_meas_pars_t;$$->flag=true;}
                             | fermionic_putpourri_meas_pars each {$$->flag=$2;}
                             | fermionic_putpourri_meas_pars after {$$->after=$2;}
                             | fermionic_putpourri_meas_pars path {$$->path=$2;}
                             | fermionic_putpourri_meas_pars residue {$$->residue=$2;}
                             | fermionic_putpourri_meas_pars compute_susc {$$->compute_susc=$2;}
                             | fermionic_putpourri_meas_pars ncopies {$$->ncopies=$2;}
                             | fermionic_putpourri_meas_pars nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// RENDENS //////////////////////////////////////////////////

global_quark_rendens_meas: TK_QUARK_RENDENS TK_NO {driver->quark_rendens_meas_pars.flag=false;}
                         | quark_rendens_meas_pars {driver->quark_rendens_meas_pars=(*$1);delete $1;}
;

quark_rendens_meas_pars: TK_QUARK_RENDENS {$$=new quark_rendens_meas_pars_t;$$->flag=true;}
                       | quark_rendens_meas_pars each {$$->flag=$2;}
                       | quark_rendens_meas_pars after {$$->after=$2;}
                       | quark_rendens_meas_pars path {$$->path=$2;}
                       | quark_rendens_meas_pars residue {$$->residue=$2;}
                       | quark_rendens_meas_pars ncopies {$$->ncopies=$2;}
                       | quark_rendens_meas_pars nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// MAGNETIZATION //////////////////////////////////////////////////

global_magnetization_meas: TK_MAGNETIZATION TK_NO {driver->magnetization_meas_pars.flag=false;}
                         | magnetization_meas_pars {driver->magnetization_meas_pars=(*$1);delete $1;}
;

magnetization_meas_pars: TK_MAGNETIZATION {$$=new magnetization_meas_pars_t;$$->flag=true;}
                       | magnetization_meas_pars each {$$->flag=$2;}
                       | magnetization_meas_pars after {$$->after=$2;}
                       | magnetization_meas_pars path {$$->path=$2;}
                       | magnetization_meas_pars residue {$$->residue=$2;}
                       | magnetization_meas_pars ncopies {$$->ncopies=$2;}
                       | magnetization_meas_pars nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// EVOLUTION //////////////////////////////////////////////////

global_evolve_pars: TK_NTRAJ_TOT '=' int_numb {driver->evol_pars.ntraj_tot=$3;}
                  | TK_SKIP_MTEST_NTRAJ '=' int_numb {driver->evol_pars.skip_mtest_ntraj=$3;}
                  | TK_TRAJ_LENGTH '=' real_numb {driver->evol_pars.traj_length=$3;}
                  | TK_PF_ACTION_RESIDUE '=' real_numb {driver->evol_pars.pf_action_residue=$3;}
                  | TK_MD_RESIDUE '=' real_numb {driver->evol_pars.md_residue=$3;}
                  | TK_NMD_STEPS '=' int_numb {driver->evol_pars.nmd_steps=$3;}
                  | TK_NGAUGE_SUBSTEPS '=' int_numb {driver->evol_pars.ngauge_substeps=$3;}
;

////////////////////////////////////////////////// CONF PARS ///////////////////////////////////////////////////

global_conf_pars: TK_CONF_PATH '=' TK_QUOTED_TEXT {driver->conf_pars.path=$3;}
                | TK_STORE_CONF_PATH '=' TK_QUOTED_TEXT {driver->conf_pars.store_path=$3;}
                | TK_STORE_CONF_EACH '=' int_numb {driver->conf_pars.store_each=$3;}
                | TK_STORE_RUNNING_TEMP_CONF '=' int_numb {driver->conf_pars.store_running=$3;}
                | TK_START_COND '=' TK_HOT {driver->conf_pars.start_cond=HOT_START_COND;}
                | TK_START_COND '=' TK_COLD {driver->conf_pars.start_cond=COLD_START_COND;}
;

/////////////////////////////////////////////////// GAUGE OBS /////////////////////////////////////////////////////

global_plaq_pol_meas: TK_PLAQ_POL TK_NO {driver->plaq_pol_meas_pars.flag=false;}
                    | plaq_pol_meas_pars {driver->plaq_pol_meas_pars=(*$1);delete $1;}
;

plaq_pol_meas_pars: TK_PLAQ_POL {$$=new gauge_obs_meas_pars_t;$$->flag=true;}
                  | plaq_pol_meas_pars each {$$->flag=$2;}
                  | plaq_pol_meas_pars after {$$->after=$2;}
                  | plaq_pol_meas_pars path {$$->path=$2;}
;

/////////////////////////////////////////////// LIST OF INTEGERS ///////////////////////////////////////////////////

//int_list: internal_int_list TK_CUR_BR_CL {$$=$1;}
//;

//internal_int_list: TK_CUR_BR_OP int_numb {$$=new std::vector<int>;$$->push_back($2);}
//                 | internal_int_list TK_COMMA int_numb {$$->push_back($3);}
//;

/////////////////////////////////////////////// LIST OF INTEGERS ///////////////////////////////////////////////////

int_pair_list: internal_int_pair_list TK_CUR_BR_CL {$$=$1;}
;

internal_int_pair_list: TK_CUR_BR_OP int_pair {$$=new std::vector<std::pair<int,int> >;$$->push_back(*$2);}
                      | internal_int_pair_list TK_COMMA int_pair {$$->push_back(*$3);}
;

/////////////////////////////////////////////// PAIR OF INTEGERS ///////////////////////////////////////////////////

int_pair: TK_BR_OP int_numb TK_COMMA int_numb TK_BR_CL {$$=new std::pair<int,int>; (*$$)=std::make_pair($2,$4);}
;

//////////////////////////////////////////////////// CASTING //////////////////////////////////////////////////////

//cast to a double numb
real_numb: TK_DOUBLE {$$=$1;master_printf("Copying %lg to double\n",$1);}
         | int_numb {$$=$1;master_printf("Casting %d to double\n",$1);}
         | TK_PLUS real_numb %prec NEG {$$=$2;}
         | TK_MINUS real_numb %prec NEG {$$=-$2;}
         | real_numb TK_PLUS real_numb {$$=$1+$3;}
         | real_numb TK_MINUS real_numb {$$=$1-$3;}
         | real_numb TK_TIMES real_numb {$$=$1*$3;}
         | real_numb TK_DIV real_numb {$$=$1/$3;}
         | real_numb TK_POW real_numb {$$=pow($1,$3);}
         | TK_BR_OP real_numb TK_BR_CL {$$=$2;}
;

//cast to integer
int_numb: TK_INT {$$=$1;master_printf("Copying %d to integer\n",$1);}
        | TK_PLUS int_numb %prec NEG {$$=$2;}
        | TK_MINUS int_numb %prec NEG {$$=-$2;}
        | int_numb TK_PLUS int_numb {$$=$1+$3;}
        | int_numb TK_MINUS int_numb {$$=$1-$3;}
        | int_numb TK_TIMES int_numb {$$=$1*$3;}
        | int_numb TK_DIV int_numb {$$=$1/$3;}
        | int_numb TK_POW int_numb {$$=(int)pow($1,$3);}
        | TK_BR_OP int_numb TK_BR_CL {$$=$2;}
;

